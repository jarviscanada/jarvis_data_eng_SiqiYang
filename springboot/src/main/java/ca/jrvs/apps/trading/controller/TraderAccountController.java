package ca.jrvs.apps.trading.controller;


import ca.jrvs.apps.trading.model.TraderAccountView;
import ca.jrvs.apps.trading.model.domain.Account;
import ca.jrvs.apps.trading.model.domain.Trader;
import ca.jrvs.apps.trading.service.TradeAccountService;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;
import java.time.LocalDate;
import java.util.Date;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.format.annotation.DateTimeFormat;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.ResponseStatus;


@Api(value = "Trader", produces = MediaType.APPLICATION_JSON_UTF8_VALUE)
@Controller
@RequestMapping("/trader")
public class TraderAccountController {
  private TradeAccountService tradeAccountService;

  @Autowired
  public TraderAccountController(TradeAccountService tradeAccountService) {
    this.tradeAccountService = tradeAccountService;
  }

  @ApiOperation(value = "create a trade account",notes = "trader and account key are the same,"
      + "ther both are autogenerated")
  @ResponseStatus(HttpStatus.CREATED)
  @ResponseBody
  @PostMapping(
      path = "/firstname/{firstname}/lastname/{lastname}/dob/{dob}/country/{country}/email/{email}",
      produces = {MediaType.APPLICATION_JSON_UTF8_VALUE}
  )
  public TraderAccountView createTrader(@PathVariable String firstname,
      @PathVariable String lastname,
      @PathVariable @DateTimeFormat(pattern = "yyyy-MM-dd")LocalDate dob,
      @PathVariable String country, @PathVariable String email){
    try{
      Trader trader = new Trader();
      trader.setLast_name(lastname);
      trader.setCountry(country);
      trader.setDob(java.sql.Date.valueOf(dob));
      trader.setFirst_name(firstname);
      trader.setEmail(email);
      return tradeAccountService.createTraderAndAccount(trader);
    }catch (Exception e) {
      throw ResponseExceptionUtil.getResponseStatusException(e);
    }
  }

  @ApiOperation(value = "create a trader and a account with DTO",
      notes = "trader and account key are the same,"
          + "ther both are autogenerated")
  @ResponseStatus(HttpStatus.CREATED)
  @PostMapping(path = "/", produces = {MediaType.APPLICATION_JSON_UTF8_VALUE})
  @ResponseBody
  public TraderAccountView createTrader(@RequestBody Trader trader) {
    try{
      return tradeAccountService.createTraderAndAccount(trader);
    }catch (Exception e) {
      throw ResponseExceptionUtil.getResponseStatusException(e);
    }
  }

  @ApiOperation(value = "delete a trader", notes = "delete the a trader account if the balance is "
      + "zero or there is no open positions also delete the security order and account")
  @ApiResponses(value = {@ApiResponse(code = 400, message = "unable to delete the user")})
  @DeleteMapping(path = "/traderId/{traderId}")
  @ResponseStatus(HttpStatus.OK)
  public void deleteTrader(@PathVariable Integer traderId) {
    try{
      tradeAccountService.deleteTraderById(traderId);
    }catch (Exception e){
      throw ResponseExceptionUtil.getResponseStatusException(e);
    }
  }

  @ApiOperation(value = "deposit a fund", notes = "deposit a fund to the trader accound with given id")
  @ApiResponses(value = {
      @ApiResponse(code = 404, message = "traderId is not found"),
      @ApiResponse(code = 400, message = "unable to deposit due to user input")
  })
  @ResponseStatus(HttpStatus.OK)
  @ResponseBody
  @PutMapping(path = "/deposit/traderId/{traderId}/amount/{amount}")
  public Account depositFund(@PathVariable Integer traderId,@PathVariable Double amount) {
    try {
      return tradeAccountService.deposit(traderId,amount);
    }catch (Exception e) {
      throw ResponseExceptionUtil.getResponseStatusException(e);
    }
  }

  @ApiOperation(value = "with draw a fund", notes = "deposit a fund to the trader accound with given id")
  @ApiResponses(value = {
      @ApiResponse(code = 404, message = "traderId is not found"),
      @ApiResponse(code = 400, message = "unable to deposit due to user input")
  })
  @ResponseStatus(HttpStatus.OK)
  @ResponseBody
  @PutMapping(path = "/withdraw/traderId/{traderId}/amount/{amount}")
  public Account withdrawFund(@PathVariable Integer traderId,@PathVariable Double amount) {
    try {
      return tradeAccountService.withdraw(traderId,amount);
    }catch (Exception e) {
      throw ResponseExceptionUtil.getResponseStatusException(e);
    }
  }



}
